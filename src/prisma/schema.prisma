// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Role {
    id    Int    @id @default(autoincrement())
    name  String @unique
    users User[]
}

model User {
    id          String       @id @default(uuid())
    email       String       @unique
    password    String
    role        Role         @relation(fields: [roleId], references: [id])
    roleId      Int
    consultants Consultant[]
    candidates  Candidate[]
    enterprises Recruiter[]
}

model Admin {
    id       String @id @default(uuid())
    email    String @unique
    password String
}

model Consultant {
    id     String @id @default(uuid())
    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model Candidate {
    id           String        @id @unique @default(uuid())
    firstname    String
    lastname     String
    isApproved   Boolean       @default(false)
    user         User          @relation(fields: [userId], references: [id])
    userId       String
    resumes      Resume?
    applications Application[]
}

model Recruiter {
    id          String  @id @default(uuid())
    societyName String
    address     String
    user        User    @relation(fields: [userId], references: [id])
    userId      String
    offers      Offer[]
}

model Resume {
    id          String    @id @default(uuid())
    name        String
    path        String
    candidate   Candidate @relation(fields: [candidateId], references: [id])
    candidateId String    @unique
}

model Offer {
    id              Int           @id @default(autoincrement())
    title           String
    reference       String
    salary          Int
    place           String
    schedules       String
    contractType    String
    publicationDate DateTime
    isApproved      Boolean       @default(false)
    recruiter       Recruiter     @relation(fields: [recruiterId], references: [id])
    recruiterId     String
    applications    Application[]
}

model Application {
    id              String    @id @default(uuid())
    applicationDate DateTime
    candidate       Candidate @relation(fields: [candidateId], references: [id])
    candidateId     String
    offer           Offer     @relation(fields: [offerId], references: [id])
    offerId         Int
}
